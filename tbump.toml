# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[version]
current = "1.0.0rc4"

# Regex pattern that supports release candidates (rc), alpha, beta, etc.
# This will match versions like: 1.0.0, 1.0.0rc1, 1.0.0rc2, 1.0.0alpha1, 1.0.0beta1
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (
    (?P<prerelease>rc|alpha|beta)
    (?P<prerelease_number>\d+)
  )?
  '''

[git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[file]]
src = "pyproject.toml"

# If you have files where you want to use a different version format,
# you can use version_template. For example, if you want to show
# just the main version without prerelease info somewhere:
# [[file]]
# src = "src/version.py"
# version_template = "{major}.{minor}.{patch}"
# search = 'STABLE_VERSION = "{current_version}"'

# Set default values for optional groups
[[field]]
name = "prerelease"
default = ""

[[field]]
name = "prerelease_number"
default = ""

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
