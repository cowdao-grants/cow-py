# Generated by ariadne-codegen
# Source: https://api.thegraph.com/subgraphs/name/cowprotocol/cow

from enum import Enum


class Aggregation_interval(str, Enum):
    hour = "hour"
    day = "day"


class Bundle_orderBy(str, Enum):
    id = "id"
    ethPriceUSD = "ethPriceUSD"


class DailyTotal_orderBy(str, Enum):
    id = "id"
    timestamp = "timestamp"
    totalTokens = "totalTokens"
    numberOfTrades = "numberOfTrades"
    orders = "orders"
    settlements = "settlements"
    volumeUsd = "volumeUsd"
    volumeEth = "volumeEth"
    feesUsd = "feesUsd"
    feesEth = "feesEth"
    tokens = "tokens"


class HourlyTotal_orderBy(str, Enum):
    id = "id"
    timestamp = "timestamp"
    totalTokens = "totalTokens"
    numberOfTrades = "numberOfTrades"
    orders = "orders"
    settlements = "settlements"
    volumeUsd = "volumeUsd"
    volumeEth = "volumeEth"
    feesUsd = "feesUsd"
    feesEth = "feesEth"
    tokens = "tokens"


class OrderDirection(str, Enum):
    asc = "asc"
    desc = "desc"


class Order_orderBy(str, Enum):
    id = "id"
    owner = "owner"
    owner__id = "owner__id"
    owner__address = "owner__address"
    owner__firstTradeTimestamp = "owner__firstTradeTimestamp"
    owner__isSolver = "owner__isSolver"
    owner__numberOfTrades = "owner__numberOfTrades"
    owner__solvedAmountEth = "owner__solvedAmountEth"
    owner__solvedAmountUsd = "owner__solvedAmountUsd"
    owner__tradedAmountUsd = "owner__tradedAmountUsd"
    owner__tradedAmountEth = "owner__tradedAmountEth"
    tradesTimestamp = "tradesTimestamp"
    invalidateTimestamp = "invalidateTimestamp"
    presignTimestamp = "presignTimestamp"
    trades = "trades"
    isSigned = "isSigned"
    isValid = "isValid"


class PairDaily_orderBy(str, Enum):
    id = "id"
    token0 = "token0"
    token0__id = "token0__id"
    token0__address = "token0__address"
    token0__firstTradeTimestamp = "token0__firstTradeTimestamp"
    token0__name = "token0__name"
    token0__symbol = "token0__symbol"
    token0__decimals = "token0__decimals"
    token0__totalVolume = "token0__totalVolume"
    token0__priceEth = "token0__priceEth"
    token0__priceUsd = "token0__priceUsd"
    token0__numberOfTrades = "token0__numberOfTrades"
    token0__totalVolumeUsd = "token0__totalVolumeUsd"
    token0__totalVolumeEth = "token0__totalVolumeEth"
    token1 = "token1"
    token1__id = "token1__id"
    token1__address = "token1__address"
    token1__firstTradeTimestamp = "token1__firstTradeTimestamp"
    token1__name = "token1__name"
    token1__symbol = "token1__symbol"
    token1__decimals = "token1__decimals"
    token1__totalVolume = "token1__totalVolume"
    token1__priceEth = "token1__priceEth"
    token1__priceUsd = "token1__priceUsd"
    token1__numberOfTrades = "token1__numberOfTrades"
    token1__totalVolumeUsd = "token1__totalVolumeUsd"
    token1__totalVolumeEth = "token1__totalVolumeEth"
    token0Price = "token0Price"
    token1Price = "token1Price"
    token0relativePrice = "token0relativePrice"
    token1relativePrice = "token1relativePrice"
    timestamp = "timestamp"
    volumeToken0 = "volumeToken0"
    volumeToken1 = "volumeToken1"
    volumeTradedEth = "volumeTradedEth"
    volumeTradedUsd = "volumeTradedUsd"


class PairHourly_orderBy(str, Enum):
    id = "id"
    token0 = "token0"
    token0__id = "token0__id"
    token0__address = "token0__address"
    token0__firstTradeTimestamp = "token0__firstTradeTimestamp"
    token0__name = "token0__name"
    token0__symbol = "token0__symbol"
    token0__decimals = "token0__decimals"
    token0__totalVolume = "token0__totalVolume"
    token0__priceEth = "token0__priceEth"
    token0__priceUsd = "token0__priceUsd"
    token0__numberOfTrades = "token0__numberOfTrades"
    token0__totalVolumeUsd = "token0__totalVolumeUsd"
    token0__totalVolumeEth = "token0__totalVolumeEth"
    token1 = "token1"
    token1__id = "token1__id"
    token1__address = "token1__address"
    token1__firstTradeTimestamp = "token1__firstTradeTimestamp"
    token1__name = "token1__name"
    token1__symbol = "token1__symbol"
    token1__decimals = "token1__decimals"
    token1__totalVolume = "token1__totalVolume"
    token1__priceEth = "token1__priceEth"
    token1__priceUsd = "token1__priceUsd"
    token1__numberOfTrades = "token1__numberOfTrades"
    token1__totalVolumeUsd = "token1__totalVolumeUsd"
    token1__totalVolumeEth = "token1__totalVolumeEth"
    token0Price = "token0Price"
    token1Price = "token1Price"
    token0relativePrice = "token0relativePrice"
    token1relativePrice = "token1relativePrice"
    timestamp = "timestamp"
    volumeToken0 = "volumeToken0"
    volumeToken1 = "volumeToken1"
    volumeTradedEth = "volumeTradedEth"
    volumeTradedUsd = "volumeTradedUsd"


class Pair_orderBy(str, Enum):
    id = "id"
    token0 = "token0"
    token0__id = "token0__id"
    token0__address = "token0__address"
    token0__firstTradeTimestamp = "token0__firstTradeTimestamp"
    token0__name = "token0__name"
    token0__symbol = "token0__symbol"
    token0__decimals = "token0__decimals"
    token0__totalVolume = "token0__totalVolume"
    token0__priceEth = "token0__priceEth"
    token0__priceUsd = "token0__priceUsd"
    token0__numberOfTrades = "token0__numberOfTrades"
    token0__totalVolumeUsd = "token0__totalVolumeUsd"
    token0__totalVolumeEth = "token0__totalVolumeEth"
    token1 = "token1"
    token1__id = "token1__id"
    token1__address = "token1__address"
    token1__firstTradeTimestamp = "token1__firstTradeTimestamp"
    token1__name = "token1__name"
    token1__symbol = "token1__symbol"
    token1__decimals = "token1__decimals"
    token1__totalVolume = "token1__totalVolume"
    token1__priceEth = "token1__priceEth"
    token1__priceUsd = "token1__priceUsd"
    token1__numberOfTrades = "token1__numberOfTrades"
    token1__totalVolumeUsd = "token1__totalVolumeUsd"
    token1__totalVolumeEth = "token1__totalVolumeEth"
    token0Price = "token0Price"
    token1Price = "token1Price"
    token0relativePrice = "token0relativePrice"
    token1relativePrice = "token1relativePrice"
    volumeToken0 = "volumeToken0"
    volumeToken1 = "volumeToken1"
    volumeTradedEth = "volumeTradedEth"
    volumeTradedUsd = "volumeTradedUsd"


class Settlement_orderBy(str, Enum):
    id = "id"
    txHash = "txHash"
    firstTradeTimestamp = "firstTradeTimestamp"
    trades = "trades"
    solver = "solver"
    solver__id = "solver__id"
    solver__address = "solver__address"
    solver__firstTradeTimestamp = "solver__firstTradeTimestamp"
    solver__isSolver = "solver__isSolver"
    solver__numberOfTrades = "solver__numberOfTrades"
    solver__solvedAmountEth = "solver__solvedAmountEth"
    solver__solvedAmountUsd = "solver__solvedAmountUsd"
    solver__tradedAmountUsd = "solver__tradedAmountUsd"
    solver__tradedAmountEth = "solver__tradedAmountEth"


class TokenDailyTotal_orderBy(str, Enum):
    id = "id"
    token = "token"
    token__id = "token__id"
    token__address = "token__address"
    token__firstTradeTimestamp = "token__firstTradeTimestamp"
    token__name = "token__name"
    token__symbol = "token__symbol"
    token__decimals = "token__decimals"
    token__totalVolume = "token__totalVolume"
    token__priceEth = "token__priceEth"
    token__priceUsd = "token__priceUsd"
    token__numberOfTrades = "token__numberOfTrades"
    token__totalVolumeUsd = "token__totalVolumeUsd"
    token__totalVolumeEth = "token__totalVolumeEth"
    timestamp = "timestamp"
    totalVolume = "totalVolume"
    totalVolumeUsd = "totalVolumeUsd"
    totalVolumeEth = "totalVolumeEth"
    totalTrades = "totalTrades"
    openPrice = "openPrice"
    closePrice = "closePrice"
    higherPrice = "higherPrice"
    lowerPrice = "lowerPrice"
    averagePrice = "averagePrice"


class TokenHourlyTotal_orderBy(str, Enum):
    id = "id"
    token = "token"
    token__id = "token__id"
    token__address = "token__address"
    token__firstTradeTimestamp = "token__firstTradeTimestamp"
    token__name = "token__name"
    token__symbol = "token__symbol"
    token__decimals = "token__decimals"
    token__totalVolume = "token__totalVolume"
    token__priceEth = "token__priceEth"
    token__priceUsd = "token__priceUsd"
    token__numberOfTrades = "token__numberOfTrades"
    token__totalVolumeUsd = "token__totalVolumeUsd"
    token__totalVolumeEth = "token__totalVolumeEth"
    timestamp = "timestamp"
    totalVolume = "totalVolume"
    totalVolumeUsd = "totalVolumeUsd"
    totalVolumeEth = "totalVolumeEth"
    totalTrades = "totalTrades"
    openPrice = "openPrice"
    closePrice = "closePrice"
    higherPrice = "higherPrice"
    lowerPrice = "lowerPrice"
    averagePrice = "averagePrice"


class TokenTradingEvent_orderBy(str, Enum):
    id = "id"
    token = "token"
    token__id = "token__id"
    token__address = "token__address"
    token__firstTradeTimestamp = "token__firstTradeTimestamp"
    token__name = "token__name"
    token__symbol = "token__symbol"
    token__decimals = "token__decimals"
    token__totalVolume = "token__totalVolume"
    token__priceEth = "token__priceEth"
    token__priceUsd = "token__priceUsd"
    token__numberOfTrades = "token__numberOfTrades"
    token__totalVolumeUsd = "token__totalVolumeUsd"
    token__totalVolumeEth = "token__totalVolumeEth"
    trade = "trade"
    trade__id = "trade__id"
    trade__timestamp = "trade__timestamp"
    trade__gasPrice = "trade__gasPrice"
    trade__feeAmount = "trade__feeAmount"
    trade__txHash = "trade__txHash"
    trade__buyAmount = "trade__buyAmount"
    trade__sellAmount = "trade__sellAmount"
    trade__buyAmountEth = "trade__buyAmountEth"
    trade__sellAmountEth = "trade__sellAmountEth"
    trade__buyAmountUsd = "trade__buyAmountUsd"
    trade__sellAmountUsd = "trade__sellAmountUsd"
    timestamp = "timestamp"
    amountEth = "amountEth"
    amountUsd = "amountUsd"


class Token_orderBy(str, Enum):
    id = "id"
    address = "address"
    firstTradeTimestamp = "firstTradeTimestamp"
    name = "name"
    symbol = "symbol"
    decimals = "decimals"
    totalVolume = "totalVolume"
    priceEth = "priceEth"
    priceUsd = "priceUsd"
    history = "history"
    hourlyTotals = "hourlyTotals"
    dailyTotals = "dailyTotals"
    numberOfTrades = "numberOfTrades"
    totalVolumeUsd = "totalVolumeUsd"
    totalVolumeEth = "totalVolumeEth"


class Total_orderBy(str, Enum):
    id = "id"
    tokens = "tokens"
    orders = "orders"
    traders = "traders"
    numberOfTrades = "numberOfTrades"
    settlements = "settlements"
    volumeUsd = "volumeUsd"
    volumeEth = "volumeEth"
    feesUsd = "feesUsd"
    feesEth = "feesEth"


class Trade_orderBy(str, Enum):
    id = "id"
    timestamp = "timestamp"
    gasPrice = "gasPrice"
    feeAmount = "feeAmount"
    txHash = "txHash"
    settlement = "settlement"
    settlement__id = "settlement__id"
    settlement__txHash = "settlement__txHash"
    settlement__firstTradeTimestamp = "settlement__firstTradeTimestamp"
    buyAmount = "buyAmount"
    sellAmount = "sellAmount"
    sellToken = "sellToken"
    sellToken__id = "sellToken__id"
    sellToken__address = "sellToken__address"
    sellToken__firstTradeTimestamp = "sellToken__firstTradeTimestamp"
    sellToken__name = "sellToken__name"
    sellToken__symbol = "sellToken__symbol"
    sellToken__decimals = "sellToken__decimals"
    sellToken__totalVolume = "sellToken__totalVolume"
    sellToken__priceEth = "sellToken__priceEth"
    sellToken__priceUsd = "sellToken__priceUsd"
    sellToken__numberOfTrades = "sellToken__numberOfTrades"
    sellToken__totalVolumeUsd = "sellToken__totalVolumeUsd"
    sellToken__totalVolumeEth = "sellToken__totalVolumeEth"
    buyToken = "buyToken"
    buyToken__id = "buyToken__id"
    buyToken__address = "buyToken__address"
    buyToken__firstTradeTimestamp = "buyToken__firstTradeTimestamp"
    buyToken__name = "buyToken__name"
    buyToken__symbol = "buyToken__symbol"
    buyToken__decimals = "buyToken__decimals"
    buyToken__totalVolume = "buyToken__totalVolume"
    buyToken__priceEth = "buyToken__priceEth"
    buyToken__priceUsd = "buyToken__priceUsd"
    buyToken__numberOfTrades = "buyToken__numberOfTrades"
    buyToken__totalVolumeUsd = "buyToken__totalVolumeUsd"
    buyToken__totalVolumeEth = "buyToken__totalVolumeEth"
    order = "order"
    order__id = "order__id"
    order__tradesTimestamp = "order__tradesTimestamp"
    order__invalidateTimestamp = "order__invalidateTimestamp"
    order__presignTimestamp = "order__presignTimestamp"
    order__isSigned = "order__isSigned"
    order__isValid = "order__isValid"
    buyAmountEth = "buyAmountEth"
    sellAmountEth = "sellAmountEth"
    buyAmountUsd = "buyAmountUsd"
    sellAmountUsd = "sellAmountUsd"


class UniswapPool_orderBy(str, Enum):
    id = "id"
    token0 = "token0"
    token0__id = "token0__id"
    token0__address = "token0__address"
    token0__name = "token0__name"
    token0__symbol = "token0__symbol"
    token0__decimals = "token0__decimals"
    token0__priceEth = "token0__priceEth"
    token0__priceUsd = "token0__priceUsd"
    token1 = "token1"
    token1__id = "token1__id"
    token1__address = "token1__address"
    token1__name = "token1__name"
    token1__symbol = "token1__symbol"
    token1__decimals = "token1__decimals"
    token1__priceEth = "token1__priceEth"
    token1__priceUsd = "token1__priceUsd"
    liquidity = "liquidity"
    token0Price = "token0Price"
    token1Price = "token1Price"
    tick = "tick"
    totalValueLockedToken0 = "totalValueLockedToken0"
    totalValueLockedToken1 = "totalValueLockedToken1"


class UniswapToken_orderBy(str, Enum):
    id = "id"
    address = "address"
    name = "name"
    symbol = "symbol"
    decimals = "decimals"
    priceEth = "priceEth"
    priceUsd = "priceUsd"
    allowedPools = "allowedPools"


class User_orderBy(str, Enum):
    id = "id"
    address = "address"
    firstTradeTimestamp = "firstTradeTimestamp"
    ordersPlaced = "ordersPlaced"
    isSolver = "isSolver"
    numberOfTrades = "numberOfTrades"
    solvedAmountEth = "solvedAmountEth"
    solvedAmountUsd = "solvedAmountUsd"
    tradedAmountUsd = "tradedAmountUsd"
    tradedAmountEth = "tradedAmountEth"


class _SubgraphErrorPolicy_(str, Enum):
    allow = "allow"
    deny = "deny"
